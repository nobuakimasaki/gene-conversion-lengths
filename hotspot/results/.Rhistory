library(dplyr)
library(purrr)
library(tibble)
library(readr)
library(tidyr)
library(stringr)
library(ggplot2)
l_psi_hotspot <- read.csv("l_psi_hotspot.csv")
l_psi_nonhotspot <- read.csv("l_psi_nonhotspot.csv")
nrow(l_psi_hotspot)
nrow(l_psi_nonhotspot)
nrow(l_psi_hotspot) + nrow(l_psi_nonhotspot)
res_null_hotspot <- read.csv("res_null_hotspot.csv")
res_null_hotspot$type <- "hotspot"
res_null_nonhotspot <- read.csv("res_null_nonhotspot.csv")
res_null_nonhotspot$type <- "nonhotspot"
res_sum_hotspot <- read.csv("res_sum_hotspot.csv")
res_sum_hotspot$type <- "hotspot"
res_sum_nonhotspot <- read.csv("res_sum_nonhotspot.csv")
res_sum_nonhotspot$type <- "nonhotspot"
res_mixture_hotspot <- read.csv("res_mixture_hotspot.csv") %>% arrange(NLL)
res_mixture_nonhotspot <- read.csv("res_mixture_nonhotspot.csv") %>% arrange(NLL)
res_mixture_hotspot <- res_mixture_hotspot[1,]
res_mixture_hotspot$type <- "hotspot"
res_mixture_nonhotspot <- res_mixture_nonhotspot[1,]
res_mixture_nonhotspot$type <- "nonhotspot"
res_df <- rbind(res_null_hotspot, res_null_nonhotspot,
res_sum_hotspot, res_sum_nonhotspot,
res_mixture_hotspot, res_mixture_nonhotspot)
res_df$mean1 <- 1/res_df$phi1
res_df$mean2 <- 1/res_df$phi2
long_est <- res_df %>%
select(-X) %>%  # drop X column
pivot_longer(
cols = c(NLL, AIC, mean, w1, phi1, phi2, mean1, mean2),
names_to = "variable",
values_to = "est")
long_est_hotspot <- long_est %>% filter(type == "hotspot")
long_est_hotspot %>% filter(model == "mixture" & variable == "AIC") %>% select(est) - long_est_hotspot %>% filter(model == "null" & variable == "AIC") %>% select(est)
long_est_nonhotspot <- long_est %>% filter(type == "nonhotspot")
long_est_nonhotspot %>% filter(model == "mixture" & variable == "AIC") %>% select(est) - long_est_nonhotspot %>% filter(model == "null" & variable == "AIC") %>% select(est)
print(genomic_avg_rate)
library(dplyr)
# Function to calculate recombination rate (cM/Mb) between adjacent markers
# that are at least 2 kb apart in a given recombination map DataFrame
calc_cM_per_bp <- function(df) {
first_row <- 1
n <- nrow(df)
results <- list()
j <- 0
while (j < n & first_row < n) {
for (j in (first_row + 1):n) {
if (df$V4[j] - df$V4[first_row] >= 2000) {
rate <- (df$V3[j] - df$V3[first_row]) / ((df$V4[j] - df$V4[first_row]) / 1e6)
# Add genetic start and end positions (V3)
results[[length(results) + 1]] <- c(
rate,
first_row,
j,
df$V4[first_row],  # start_bp
df$V4[j],          # end_bp
df$V3[first_row],  # start_cM
df$V3[j]           # end_cM
)
first_row <- j
break
}
}
}
res.df <- results %>%
unlist() %>%
matrix(byrow = TRUE, ncol = 7) %>%
as.data.frame()
colnames(res.df) <- c("rate", "first_marker", "last_marker", "first_pos", "last_pos", "start_cM", "end_cM")
res.df$center_bp <- (res.df$first_pos + res.df$last_pos) / 2
return(res.df)
}
# Function to read a map file for a given chromosome
read_map_file <- function(chr) {
str = paste0("decode2019.chrchr", chr, ".GRCh38.map")
df <- read.table(str)
return(df)
}
# Read recombination maps for chromosomes 1–22 into a list
map_list <- lapply(1:22, read_map_file)
getwd()
library(dplyr)
# Function to calculate recombination rate (cM/Mb) between adjacent markers
# that are at least 2 kb apart in a given recombination map DataFrame
calc_cM_per_bp <- function(df) {
first_row <- 1
n <- nrow(df)
results <- list()
j <- 0
while (j < n & first_row < n) {
for (j in (first_row + 1):n) {
if (df$V4[j] - df$V4[first_row] >= 2000) {
rate <- (df$V3[j] - df$V3[first_row]) / ((df$V4[j] - df$V4[first_row]) / 1e6)
# Add genetic start and end positions (V3)
results[[length(results) + 1]] <- c(
rate,
first_row,
j,
df$V4[first_row],  # start_bp
df$V4[j],          # end_bp
df$V3[first_row],  # start_cM
df$V3[j]           # end_cM
)
first_row <- j
break
}
}
}
res.df <- results %>%
unlist() %>%
matrix(byrow = TRUE, ncol = 7) %>%
as.data.frame()
colnames(res.df) <- c("rate", "first_marker", "last_marker", "first_pos", "last_pos", "start_cM", "end_cM")
res.df$center_bp <- (res.df$first_pos + res.df$last_pos) / 2
return(res.df)
}
# Function to read a map file for a given chromosome
read_map_file <- function(chr) {
str = paste0("decode2019.chrchr", chr, ".GRCh38.map")
df <- read.table(str)
return(df)
}
# Read recombination maps for chromosomes 1–22 into a list
map_list <- lapply(1:22, read_map_file)
